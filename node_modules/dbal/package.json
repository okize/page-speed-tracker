{
  "name": "dbal",
  "version": "0.2.1",
  "author": {
    "name": "Ketil Albertsen"
  },
  "main": "src/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/litek/node-dbal.git"
  },
  "homepage": "https://github.com/litek/node-dbal",
  "devDependencies": {
    "mocha": "~1.17.0",
    "should": "~3.1.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt": "~0.4.2",
    "pg": "~2.11.0"
  },
  "dependencies": {
    "sql": "~0.35.0",
    "bluebird": "~1.0.1"
  },
  "peerDependencies": {
    "pg": "~2.11.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# node-dbal\n\nSimple wrapper on top of [pg](https://github.com/brianc/node-postgres) and [sql](https://github.com/brianc/node-sql).\n\n```javascript\n// connect with string\nvar db = require(\"dbal\")(\"tcp://user:pass@host:5432/database\");\n\n// using callbacks or promise\nvar query = \"SELECT 'bar' AS foo\";\ndb.query(query, function(err, res) {\n  // res.rows[0].foo equals bar\n});\n\ndb.query(query).then(function(res) {\n  // res.rows[0].foo equals bar\n});\n\n// using query builder\nvar users = db.table({\n  name: \"users\",\n  columns: [\"id\"]\n});\n\nvar sql = users.select().where({id: 1});\n\nsql.exec().then(function(res) {\n  // returning result for \"SELECT * FROM users WHERE id = 1\"\n});\n\n// can also be passed to dbal().query\ndb.query(sql).then(function(err, res) {\n  // returning result for \"SELECT * FROM users WHERE id = 1\"\n});\n\n// insert row\nvar quotes = db.table({\n  name: \"quotes\",\n  columns: [\"author\", \"quote\"]\n});\n\nquotes\n  .insert({author: \"Caesar\", quote: \"Veni, vidi, vici\"})\n  .returning(\"id\")\n  .exec()\n  .then(function(res) {\n    // assuming id is a sequence, res.rows[0].id is the generated value\n  });\n```\n\n## Methods\nCallback methods are also promises.\n\n### instance(config)\nAlias for instance.table\n\n### instance.table(config)\nReturns new sql builder instance for table.\n\n#### table.exec([dbal], [callback])\nExecutes query and returns result, releasing connection back to the pool.\n\n### instance.query(query, [params], [callback])\nExecutes query and returns result, releasing connection back to the pool.\n\n### instance.transaction()\nReturns pg client for transaction use.\n",
  "readmeFilename": "README.md",
  "description": "Simple wrapper on top of [pg](https://github.com/brianc/node-postgres) and [sql](https://github.com/brianc/node-sql).",
  "bugs": {
    "url": "https://github.com/litek/node-dbal/issues"
  },
  "_id": "dbal@0.2.1",
  "dist": {
    "shasum": "f700da073e541f74f39c8e1eafe7700fd1ef1ed3"
  },
  "_from": "dbal@",
  "_resolved": "https://registry.npmjs.org/dbal/-/dbal-0.2.1.tgz"
}
